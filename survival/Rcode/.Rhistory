lines(x,dnorm(x,mean = 1))
library(gnorm)
mu = 1
variance = 1
krutusis = -1
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = 1))
library(gnorm)
mu = 0
variance = 1
krutusis = -1
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = 1))
library(gnorm)
mu = 0
variance = 1
krutusis = -1
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = mu))
library(gnorm)
mu = 0
variance = 1
krutusis = -1
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = mu))
library(gnorm)
mu = 0
variance = 1
krutusis = -0.5
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = mu))
library(gnorm)
mu = 0
variance = 1
krutusis = -0.5
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = mu))
library(gnorm)
mu = 0
variance = 2
krutusis = -0.5
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = mu))
library(gnorm)
mu = 0
variance = 3
krutusis = -0.5
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = mu))
library(gnorm)
mu = 0
variance = 3
krutusis = -0.5
beta_to_kurtusis = function(beta){gamma(5/beta)*gamma(1/beta)/gamma(3/beta)^2 - 3}
kurtusis_to_beta = splinefun(x=beta_to_kurtusis(seq(.05,20,0.001)),y = seq(.05,20,0.001))
beta = kurtusis_to_beta(krutusis)
alpha = sqrt(variance*gamma(1/beta)/gamma(3/beta))
x = seq(-5,5,0.01)
plot(x,dgnorm(x=x,,mu = mu,alpha=alpha,beta = beta),type="l",ylim = c(0,0.4),col="red")
lines(x,dnorm(x,mean = mu))
plot(x,exp(-x^4))
plot(x,exp(-x^4),type="l")
plot(x,exp(-x^8),type="l")
plot(x,exp(-x^20),type="l")
plot(x,exp(-x^30),type="l")
lines(x,dunif(x,1,1),col="red")
lines(x,dunif(x,-1,1),col="red")
# reference with frailtypack
setwd(dirname(rstudioapi:::getSourceEditorContext()$path))
library(frailtypack)
data(colorectal)
data(colorectalLongi)
# Survival data preparation - only terminal events
colorectalSurv <- subset(colorectal, new.lesions == 0)
# Box-cox back transformation (lambda=0.3) and apply logarithm (with a 1 unit shift)
colorectalLongi$Yo <- (colorectalLongi$tumor.size*0.3+1)^(1/0.3)
colorectalLongi$Y <- log(colorectalLongi$Yo+1) # log transformation with shift=1
modLongi = readRDS("modLongi_n.RDS")
# computation on the same dataset
time <- c(0.00001,0.5,1, 1.5, 2, 2.5)
epoce <- epoce(modLongi,time)
print(epoce)
plot(epoce, type = "cvpol")
# same model with INLA
library(INLA)
NL <- nrow(colorectalLongi) # number of repeated measurement (longitudinal continuous outcome)
NS <- nrow(colorectalSurv) # number of survival times (i.e., number of individuals)
colorectalLongi$treatment <- as.integer(colorectalLongi$treatment)-1
colorectalLongi$prev.resection <- as.integer(colorectalLongi$prev.resection)-1
colorectalSurv$treatment <- as.integer(colorectalSurv$treatment)-1
colorectalSurv$prev.resection <- as.integer(colorectalSurv$prev.resection)-1
# survival outcome
SurvOut <- inla.surv(time = c(rep(NA, NL), colorectalSurv$time1), event = c(rep(NA, NL), colorectalSurv$state))
# create a dataset with two likelihoods for INLA
dataINLA = list(
IDrandominterceptLongi = c(colorectalLongi$id, rep(NA, NS)),
IDrandomslopeLongi = c(NS+colorectalLongi$id, rep(NA, NS)),
InterceptLongi = c(rep(1, NL), rep(NA, NS)),
SlopeLongi = c(colorectalLongi$year, rep(NA, NS)),
TrtLongi = c(colorectalLongi$treatment, rep(NA, NS)),
Slope.X.TrtLongi = c(colorectalLongi$year*colorectalLongi$treatment, rep(NA, NS)),
PrevresLongi = c(colorectalLongi$prev.resection, rep(NA, NS)),
IDrandominterceptSurv = c(rep(NA, NL), colorectalSurv$id),
IDrandomslopeSurv = c(rep(NA, NL), NS+colorectalSurv$id),
InterceptSurv = c(rep(NA, NL), rep(1, NS)),
TrtSurv = c(rep(NA, NL), colorectalSurv$treatment),
PrevresSurv = c(rep(NA, NL), colorectalSurv$prev.resection),
Yjoint = list(c(colorectalLongi$Y, rep(NA, NS)), SurvOut)
)
formJoint = Yjoint ~ -1 + InterceptLongi + SlopeLongi + TrtLongi + Slope.X.TrtLongi + PrevresLongi + #longitudinal part of the formula (fixed effects)
InterceptSurv + TrtSurv + PrevresSurv + # survival part of the formula (fixed effects)
f(IDrandominterceptLongi, model = "iidkd", order=2, n=NS*2, constr=F, hyper=list(theta1 = list(param = c(10, 1, 1, 0)))) + # random intercept
f(IDrandomslopeLongi, SlopeLongi, copy="IDrandominterceptLongi") + # random slope
f(IDrandominterceptSurv, copy="IDrandominterceptLongi", hyper = list(beta = list(fixed = FALSE, param = c(0, 0.01), initial = 0.1))) + # random intercept shared in survival model (scaled by beta)
f(IDrandomslopeSurv, copy="IDrandomslopeLongi", hyper = list(beta = list(fixed = FALSE, param = c(0, 0.01), initial = 0.1))) # random slope shared in survival model (scaled by beta)
modINLA = inla(formula = formJoint,
data=dataINLA,
family=c("gaussian", "weibullsurv"),
control.family=list(list(), list(variant=1)),
control.inla = list(int.strategy="eb"),
control.fixed=list(mean=0, prec=0.01, mean.intercept=0, prec.intercept=0.01),
control.compute = list(config = T))
inla.update(testing = TRUE)
# reference with frailtypack
setwd(dirname(rstudioapi:::getSourceEditorContext()$path))
library(frailtypack)
data(colorectal)
data(colorectalLongi)
# Survival data preparation - only terminal events
colorectalSurv <- subset(colorectal, new.lesions == 0)
# Box-cox back transformation (lambda=0.3) and apply logarithm (with a 1 unit shift)
colorectalLongi$Yo <- (colorectalLongi$tumor.size*0.3+1)^(1/0.3)
colorectalLongi$Y <- log(colorectalLongi$Yo+1) # log transformation with shift=1
modLongi = readRDS("modLongi_n.RDS")
# computation on the same dataset
time <- c(0.00001,0.5,1, 1.5, 2, 2.5)
epoce <- epoce(modLongi,time)
print(epoce)
plot(epoce, type = "cvpol")
# same model with INLA
library(INLA)
NL <- nrow(colorectalLongi) # number of repeated measurement (longitudinal continuous outcome)
NS <- nrow(colorectalSurv) # number of survival times (i.e., number of individuals)
colorectalLongi$treatment <- as.integer(colorectalLongi$treatment)-1
colorectalLongi$prev.resection <- as.integer(colorectalLongi$prev.resection)-1
colorectalSurv$treatment <- as.integer(colorectalSurv$treatment)-1
colorectalSurv$prev.resection <- as.integer(colorectalSurv$prev.resection)-1
# survival outcome
SurvOut <- inla.surv(time = c(rep(NA, NL), colorectalSurv$time1), event = c(rep(NA, NL), colorectalSurv$state))
# create a dataset with two likelihoods for INLA
dataINLA = list(
IDrandominterceptLongi = c(colorectalLongi$id, rep(NA, NS)),
IDrandomslopeLongi = c(NS+colorectalLongi$id, rep(NA, NS)),
InterceptLongi = c(rep(1, NL), rep(NA, NS)),
SlopeLongi = c(colorectalLongi$year, rep(NA, NS)),
TrtLongi = c(colorectalLongi$treatment, rep(NA, NS)),
Slope.X.TrtLongi = c(colorectalLongi$year*colorectalLongi$treatment, rep(NA, NS)),
PrevresLongi = c(colorectalLongi$prev.resection, rep(NA, NS)),
IDrandominterceptSurv = c(rep(NA, NL), colorectalSurv$id),
IDrandomslopeSurv = c(rep(NA, NL), NS+colorectalSurv$id),
InterceptSurv = c(rep(NA, NL), rep(1, NS)),
TrtSurv = c(rep(NA, NL), colorectalSurv$treatment),
PrevresSurv = c(rep(NA, NL), colorectalSurv$prev.resection),
Yjoint = list(c(colorectalLongi$Y, rep(NA, NS)), SurvOut)
)
formJoint = Yjoint ~ -1 + InterceptLongi + SlopeLongi + TrtLongi + Slope.X.TrtLongi + PrevresLongi + #longitudinal part of the formula (fixed effects)
InterceptSurv + TrtSurv + PrevresSurv + # survival part of the formula (fixed effects)
f(IDrandominterceptLongi, model = "iidkd", order=2, n=NS*2, constr=F, hyper=list(theta1 = list(param = c(10, 1, 1, 0)))) + # random intercept
f(IDrandomslopeLongi, SlopeLongi, copy="IDrandominterceptLongi") + # random slope
f(IDrandominterceptSurv, copy="IDrandominterceptLongi", hyper = list(beta = list(fixed = FALSE, param = c(0, 0.01), initial = 0.1))) + # random intercept shared in survival model (scaled by beta)
f(IDrandomslopeSurv, copy="IDrandomslopeLongi", hyper = list(beta = list(fixed = FALSE, param = c(0, 0.01), initial = 0.1))) # random slope shared in survival model (scaled by beta)
modINLA = inla(formula = formJoint,
data=dataINLA,
family=c("gaussian", "weibullsurv"),
control.family=list(list(), list(variant=1)),
control.inla = list(int.strategy="eb"),
control.fixed=list(mean=0, prec=0.01, mean.intercept=0, prec.intercept=0.01),
control.compute = list(config = T))
alpha = unname(exp(0.1*modINLA$misc$configs$config[[1]]$theta[2]))
epoce_inla_groupcv = numeric(length(time))
epoce_inla_individual_record = list()
idx_survival = which(is.na(dataINLA$Yjoint[[1]]))
total_id = unique(colorectalLongi$id)
for (i in 1:length(time)){
time_here = time[i]
groups = rep(list(NULL),length(dataINLA$IDrandominterceptLongi))
# for (idx in 1:length(dataINLA$IDrandominterceptLongi)){
#     groups[[idx]] = idx
# }
for (idx in idx_survival){
idx2 = which(dataINLA$IDrandominterceptLongi == dataINLA$IDrandominterceptSurv[idx] & dataINLA$SlopeLongi > time_here)
groups[[idx]] = c(idx,idx2)
}
lgocv = inla.group.cv(modINLA,groups = groups)
epoce_inla_individual = c()
for(point.interest in idx_survival){
if (SurvOut$event[point.interest]){
y.here = SurvOut$time[point.interest]
}else{
y.here = SurvOut$lower[point.interest]
}
if(y.here >= time_here){
eta_star = lgocv$mean[point.interest]
if (SurvOut$event[point.interest]){temp = dweibull(y.here,shape = alpha,scale = (exp(eta_star))^(-1/alpha))/pweibull(time_here,shape = alpha,scale = (exp(eta_star))^(-1/alpha),lower.tail = FALSE)}
if (SurvOut$event[point.interest] == 0){temp = pweibull(y.here,shape = alpha,scale = (exp(eta_star))^(-1/alpha),lower.tail = FALSE)/pweibull(time_here,shape = alpha,scale = (exp(eta_star))^(-1/alpha),lower.tail = FALSE)}
epoce_inla_individual = c(epoce_inla_individual,temp)
}
}
epoce_inla_individual_record[[i]] = epoce_inla_individual
epoce_inla_groupcv[i] = mean(-log(epoce_inla_individual))
}
plot(time,epoce$cvpol,pch = 4,lty = 1,cex = 1.3,col="red",type="b",ylim = c(min(epoce_inla_groupcv,epoce$cvpol),max(epoce_inla_groupcv,epoce$cvpol)))
lines(time,epoce_inla_groupcv,type="b",pch = 19,col="blue")
library(INLA)
inla.setOption(pardiso.license="~/.pardiso.lic")
num_person = 1000
shape = 3
data_survival = data.frame(id = 1:num_person,time = NA,event = 1,scale = NA,personal_intercept = NA, personal_slope = NA)
censor_time = 5
rho = 0.5
for (i in 1:num_person){
data_survival$personal_intercept[i] = rnorm(1,sd = .1)
data_survival$personal_slope[i] = rho*data_survival$personal_intercept[i] + rnorm(1,sd = .1)
data_survival$scale[i] = exp(1.5+3*data_survival$personal_intercept[i]+5*data_survival$personal_slope[i])
data_survival$time[i] = rweibull(1,scale = data_survival$scale[i],shape = shape)
if(data_survival$time[i] >= censor_time){
data_survival$time[i] = censor_time + rnorm(1,sd = .01)
data_survival$event[i] = 0
}
}
time_possible = seq(0,max(floor(data_survival$time)),1)
intercept = 1
trend = 0.1
id_longi = c()
time_longi = c()
y_longi = c()
for(i in 1:num_person){
time_i = time_possible[time_possible<=data_survival$time[i]]
n_i = length(time_i)
y_i = intercept + trend*time_i + data_survival$personal_intercept[i] + data_survival$personal_slope[i]*time_i + rnorm(n_i,sd = .1)
y_longi = c(y_longi,y_i)
time_longi = c(time_longi,time_i)
id_longi = c(id_longi,rep(i,n_i))
}
data_longi = data.frame(id = id_longi,time = time_longi,y = y_longi)
NL = length(data_longi$id)
NS = length(data_survival$id)
# plot(x=NA,y=NA,ylim = c(min(data_longi$y),max(data_longi$y)),xlim=c(0,max(data_survival$time)),xlab="time",ylab="readings")
# for (i in 1:num_person){
#     lines(data_longi$time[data_longi$id==i],data_longi$y[data_longi$id==i],col=i)
#     if(data_survival$event[i] == 1){points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))])}else{
#         points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))],pch = 4)
#     }
#
#     lines(c(data_longi$time[max(which(data_longi$id==i))],data_survival$time[i]),c(data_longi$y[max(which(data_longi$id==i))],data_longi$y[max(which(data_longi$id==i))]),lty = 2)
# }
plot(x=NA,y=NA,ylim = c(min(data_longi$y),max(data_longi$y)),xlim=c(0,max(data_survival$time)),xlab="time",ylab="readings")
for (i in sample(num_person,size = 10)){
lines(data_longi$time[data_longi$id==i],data_longi$y[data_longi$id==i],col=i)
if(data_survival$event[i] == 1){points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))])}else{
points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))],pch = 4)
}
lines(c(data_longi$time[max(which(data_longi$id==i))],data_survival$time[i]),c(data_longi$y[max(which(data_longi$id==i))],data_longi$y[max(which(data_longi$id==i))]),lty = 2)
}
survout = inla.surv(time = c(rep(NA,NL),data_survival$time),event = c(rep(NA,NL),data_survival$event))
dataINLA = list(total_interceptlongi = c(rep(1,NL),rep(NA,NS)),
personal_intercetlongi = c(data_longi$id,rep(NA,NS)),
personal_slopelongi = c(data_longi$id+NS,rep(NA,NS)),
time = c(data_longi$time,rep(NA,NS)),
total_interceptsurv = c(rep(NA,NL),rep(1,NS)),
personal_interceptsurv = c(rep(NA,NL),data_survival$id),
personal_slopesurv = c(rep(NA,NL),data_survival$id+NS),
Yjoint = list(c(data_longi$y,rep(NA,NS)),survout))
formula = Yjoint ~ -1+ total_interceptlongi + time + f(personal_intercetlongi,model = "iidkd",order=2,n = NS*2) + f(personal_slopelongi,time,copy = "personal_intercetlongi") +
total_interceptsurv + f(personal_interceptsurv,copy = "personal_intercetlongi",hyper = list(beta=list(fixed = FALSE))) + f(personal_slopesurv,copy = "personal_intercetlongi",hyper =  list(beta=list(fixed = FALSE)))
res = inla(formula = formula,
data = dataINLA,
family=c("gaussian", "weibullsurv"),
inla.mode = "experimental",
control.family=list(list(), list(variant=1)),
control.inla = list(int.strategy="eb"),
control.compute = list(config = T,smtp="pardiso"))
# res$summary.fixed
# res$summary.hyperpar
#
#
#
#
#
#
# MC_samples <- inla.iidkd.sample(10^4, res, "personal_intercetlongi", return.cov=TRUE) # for random-effects covariance terms
# VarCov <- matrix(unlist(MC_samples), nrow = 2^2)
# VarCovMeans <- matrix(rowMeans(VarCov),2,2)
# VarCovSD <- matrix(apply(VarCov,1,sd),2,2)
# VarCov025 <- matrix(apply(VarCov,1,function(x) quantile(x, 0.025)),2,2)
# VarCov975 <- matrix(apply(VarCov,1,function(x) quantile(x, 0.975)),2,2)
#
#
# sqrt((VarCovMeans[2,2] - 0.1^2)/VarCovMeans[1,1])
# VarCovMeans
# VarCovMeans/outer(sqrt(diag(VarCovMeans)),sqrt(diag(VarCovMeans)))
#
# a = exp(res$summary.hyperpar$mode[3])
# b = exp(res$summary.hyperpar$mode[4])
# p = res$summary.hyperpar$mode[5]
# 2*exp(p)/(1+exp(p)) - 1
inla.group.cv(res)
library(INLA)
inla.setOption(pardiso.license="~/.pardiso.lic")
num_person = 1000
shape = 3
data_survival = data.frame(id = 1:num_person,time = NA,event = 1,scale = NA,personal_intercept = NA, personal_slope = NA)
censor_time = 5
rho = 0.5
for (i in 1:num_person){
data_survival$personal_intercept[i] = rnorm(1,sd = .1)
data_survival$personal_slope[i] = rho*data_survival$personal_intercept[i] + rnorm(1,sd = .1)
data_survival$scale[i] = exp(1.5+3*data_survival$personal_intercept[i]+5*data_survival$personal_slope[i])
data_survival$time[i] = rweibull(1,scale = data_survival$scale[i],shape = shape)
if(data_survival$time[i] >= censor_time){
data_survival$time[i] = censor_time + rnorm(1,sd = .01)
data_survival$event[i] = 0
}
}
time_possible = seq(0,max(floor(data_survival$time)),1)
intercept = 1
trend = 0.1
id_longi = c()
time_longi = c()
y_longi = c()
for(i in 1:num_person){
time_i = time_possible[time_possible<=data_survival$time[i]]
n_i = length(time_i)
y_i = intercept + trend*time_i + data_survival$personal_intercept[i] + data_survival$personal_slope[i]*time_i + rnorm(n_i,sd = .1)
y_longi = c(y_longi,y_i)
time_longi = c(time_longi,time_i)
id_longi = c(id_longi,rep(i,n_i))
}
data_longi = data.frame(id = id_longi,time = time_longi,y = y_longi)
NL = length(data_longi$id)
NS = length(data_survival$id)
# plot(x=NA,y=NA,ylim = c(min(data_longi$y),max(data_longi$y)),xlim=c(0,max(data_survival$time)),xlab="time",ylab="readings")
# for (i in 1:num_person){
#     lines(data_longi$time[data_longi$id==i],data_longi$y[data_longi$id==i],col=i)
#     if(data_survival$event[i] == 1){points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))])}else{
#         points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))],pch = 4)
#     }
#
#     lines(c(data_longi$time[max(which(data_longi$id==i))],data_survival$time[i]),c(data_longi$y[max(which(data_longi$id==i))],data_longi$y[max(which(data_longi$id==i))]),lty = 2)
# }
plot(x=NA,y=NA,ylim = c(min(data_longi$y),max(data_longi$y)),xlim=c(0,max(data_survival$time)),xlab="time",ylab="readings")
for (i in sample(num_person,size = 10)){
lines(data_longi$time[data_longi$id==i],data_longi$y[data_longi$id==i],col=i)
if(data_survival$event[i] == 1){points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))])}else{
points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))],pch = 4)
}
lines(c(data_longi$time[max(which(data_longi$id==i))],data_survival$time[i]),c(data_longi$y[max(which(data_longi$id==i))],data_longi$y[max(which(data_longi$id==i))]),lty = 2)
}
survout = inla.surv(time = c(rep(NA,NL),data_survival$time),event = c(rep(NA,NL),data_survival$event))
dataINLA = list(total_interceptlongi = c(rep(1,NL),rep(NA,NS)),
personal_intercetlongi = c(data_longi$id,rep(NA,NS)),
personal_slopelongi = c(data_longi$id+NS,rep(NA,NS)),
time = c(data_longi$time,rep(NA,NS)),
total_interceptsurv = c(rep(NA,NL),rep(1,NS)),
personal_interceptsurv = c(rep(NA,NL),data_survival$id),
personal_slopesurv = c(rep(NA,NL),data_survival$id+NS),
Yjoint = list(c(data_longi$y,rep(NA,NS)),survout))
formula = Yjoint ~ -1+ total_interceptlongi + time + f(personal_intercetlongi,model = "iidkd",order=2,n = NS*2) + f(personal_slopelongi,time,copy = "personal_intercetlongi") +
total_interceptsurv + f(personal_interceptsurv,copy = "personal_intercetlongi",hyper = list(beta=list(fixed = FALSE))) + f(personal_slopesurv,copy = "personal_intercetlongi",hyper =  list(beta=list(fixed = FALSE)))
res = inla(formula = formula,
data = dataINLA,
family=c("gaussian", "weibullsurv"),
inla.mode = "experimental",
control.family=list(list(), list(variant=1)),
control.inla = list(int.strategy="eb"),
control.compute = list(config = T,smtp="pardiso"))
lgocv = inla.group.cv(res)
# res$summary.fixed
# res$summary.hyperpar
#
#
#
#
#
#
# MC_samples <- inla.iidkd.sample(10^4, res, "personal_intercetlongi", return.cov=TRUE) # for random-effects covariance terms
# VarCov <- matrix(unlist(MC_samples), nrow = 2^2)
# VarCovMeans <- matrix(rowMeans(VarCov),2,2)
# VarCovSD <- matrix(apply(VarCov,1,sd),2,2)
# VarCov025 <- matrix(apply(VarCov,1,function(x) quantile(x, 0.025)),2,2)
# VarCov975 <- matrix(apply(VarCov,1,function(x) quantile(x, 0.975)),2,2)
#
#
# sqrt((VarCovMeans[2,2] - 0.1^2)/VarCovMeans[1,1])
# VarCovMeans
# VarCovMeans/outer(sqrt(diag(VarCovMeans)),sqrt(diag(VarCovMeans)))
#
# a = exp(res$summary.hyperpar$mode[3])
# b = exp(res$summary.hyperpar$mode[4])
# p = res$summary.hyperpar$mode[5]
# 2*exp(p)/(1+exp(p)) - 1
library(INLA)
inla.setOption(pardiso.license="~/.pardiso.lic")
num_person = 5000
shape = 3
data_survival = data.frame(id = 1:num_person,time = NA,event = 1,scale = NA,personal_intercept = NA, personal_slope = NA)
censor_time = 5
rho = 0.5
for (i in 1:num_person){
data_survival$personal_intercept[i] = rnorm(1,sd = .1)
data_survival$personal_slope[i] = rho*data_survival$personal_intercept[i] + rnorm(1,sd = .1)
data_survival$scale[i] = exp(1.5+3*data_survival$personal_intercept[i]+5*data_survival$personal_slope[i])
data_survival$time[i] = rweibull(1,scale = data_survival$scale[i],shape = shape)
if(data_survival$time[i] >= censor_time){
data_survival$time[i] = censor_time + rnorm(1,sd = .01)
data_survival$event[i] = 0
}
}
time_possible = seq(0,max(floor(data_survival$time)),1)
intercept = 1
trend = 0.1
id_longi = c()
time_longi = c()
y_longi = c()
for(i in 1:num_person){
time_i = time_possible[time_possible<=data_survival$time[i]]
n_i = length(time_i)
y_i = intercept + trend*time_i + data_survival$personal_intercept[i] + data_survival$personal_slope[i]*time_i + rnorm(n_i,sd = .1)
y_longi = c(y_longi,y_i)
time_longi = c(time_longi,time_i)
id_longi = c(id_longi,rep(i,n_i))
}
data_longi = data.frame(id = id_longi,time = time_longi,y = y_longi)
NL = length(data_longi$id)
NS = length(data_survival$id)
# plot(x=NA,y=NA,ylim = c(min(data_longi$y),max(data_longi$y)),xlim=c(0,max(data_survival$time)),xlab="time",ylab="readings")
# for (i in 1:num_person){
#     lines(data_longi$time[data_longi$id==i],data_longi$y[data_longi$id==i],col=i)
#     if(data_survival$event[i] == 1){points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))])}else{
#         points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))],pch = 4)
#     }
#
#     lines(c(data_longi$time[max(which(data_longi$id==i))],data_survival$time[i]),c(data_longi$y[max(which(data_longi$id==i))],data_longi$y[max(which(data_longi$id==i))]),lty = 2)
# }
plot(x=NA,y=NA,ylim = c(min(data_longi$y),max(data_longi$y)),xlim=c(0,max(data_survival$time)),xlab="time",ylab="readings")
for (i in sample(num_person,size = 10)){
lines(data_longi$time[data_longi$id==i],data_longi$y[data_longi$id==i],col=i)
if(data_survival$event[i] == 1){points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))])}else{
points(data_survival$time[i],data_longi$y[max(which(data_longi$id==i))],pch = 4)
}
lines(c(data_longi$time[max(which(data_longi$id==i))],data_survival$time[i]),c(data_longi$y[max(which(data_longi$id==i))],data_longi$y[max(which(data_longi$id==i))]),lty = 2)
}
survout = inla.surv(time = c(rep(NA,NL),data_survival$time),event = c(rep(NA,NL),data_survival$event))
dataINLA = list(total_interceptlongi = c(rep(1,NL),rep(NA,NS)),
personal_intercetlongi = c(data_longi$id,rep(NA,NS)),
personal_slopelongi = c(data_longi$id+NS,rep(NA,NS)),
time = c(data_longi$time,rep(NA,NS)),
total_interceptsurv = c(rep(NA,NL),rep(1,NS)),
personal_interceptsurv = c(rep(NA,NL),data_survival$id),
personal_slopesurv = c(rep(NA,NL),data_survival$id+NS),
Yjoint = list(c(data_longi$y,rep(NA,NS)),survout))
formula = Yjoint ~ -1+ total_interceptlongi + time + f(personal_intercetlongi,model = "iidkd",order=2,n = NS*2) + f(personal_slopelongi,time,copy = "personal_intercetlongi") +
total_interceptsurv + f(personal_interceptsurv,copy = "personal_intercetlongi",hyper = list(beta=list(fixed = FALSE))) + f(personal_slopesurv,copy = "personal_intercetlongi",hyper =  list(beta=list(fixed = FALSE)))
res = inla(formula = formula,
data = dataINLA,
family=c("gaussian", "weibullsurv"),
inla.mode = "experimental",
control.family=list(list(), list(variant=1)),
control.inla = list(int.strategy="eb"),
control.compute = list(config = T,smtp="pardiso"))
lgocv = inla.group.cv(res)
lgocv = inla.group.cv(res)
